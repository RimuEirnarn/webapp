"""Profile handler"""

from pathlib import Path
from platform import system
from configparser import ConfigParser
from typing import NamedTuple, Callable, Any
from io import StringIO

# DEFINE PROFILE DIRECTORY
# avoid conflicting with other 'webapps'
CONFIG_DIR = (Path("~/.config/rimueirnarn.webapps") if system() == 'Linux' else Path("~/.rimueirnarn.webapps")).expanduser()
CONFIG_FILE = CONFIG_DIR / "config.conf"
PROFILE_DIR = CONFIG_DIR / "profiles"
_PROFILE = ConfigParser(interpolation=None)
_PROFILE.read(CONFIG_FILE)

if not CONFIG_DIR.exists():
    CONFIG_DIR.mkdir()
    CONFIG_FILE.touch()
    PROFILE_DIR.mkdir()

OptStr = str | None
OptInt = int | None
default = object()
_DELOBJS_CW = ['js_api', 'server', 'server_args', 'localization']
_DELOBJS_S = ['func', 'server', 'server_args', 'menu']
_STR_DEFKEY = 'py:default'

class CWConfig(NamedTuple):
    """Create Window Config"""
    title: str
    url: OptStr = None
    html: OptStr = None
    js_api: OptStr = None
    width: int = 800
    height: int = 600
    x: OptInt = None
    y: OptInt = None
    resizable: bool = True
    fullscreen: bool = False
    hidden: bool = False
    frameless: bool = False
    easy_drag: bool = True
    minimized: bool = False
    on_top: bool = False
    confirm_close: bool = False
    background_color: str = "#FFFFFF"
    transparent: bool = False
    text_select: bool = False
    zoomable: bool = False
    draggable: bool = False
    server: Any = default
    server_args: dict | Any = default
    localization: dict | None = None


class StartConfig(NamedTuple):
    func: Callable[[...], Any] | None = None
    args: Any | tuple[Any, ...] | None = None
    localization: dict | None = None
    gui: OptStr = None
    debug: bool = False
    http_server: bool = False
    http_port: bool = False
    user_agent: str | None = None
    private_mode: bool = True
    storage_path: str | None = None
    menu: list | Any = default
    server: Any = default
    ssl: bool = False
    server_args: dict | Any = default


def replace_default(ns: dict[str, Any], with_: Any):
    """Replace constant default with others"""
    copied = ns.copy()
    for k in ns.copy():
        if copied[k] is default:
            copied[k] = with_
    return copied

def annihilate_defconst(ns: dict[str, Any]):
    """Delete any constant default"""
    copied = ns.copy()
    for k in ns.copy():
        if ns[k] is default or ns[k] == _STR_DEFKEY:
            del copied[k]
            continue
        if k in _DELOBJS_CW or k in _DELOBJS_S:
            del copied[k]
    return copied

def _dstring(ns: dict[Any, Any]):
    for k, v in ns.items():
        print(f"[{type(k)}] {k!r} -> {v!r}")
        if not isinstance(k, str):
            exit(1)

def _dset(section: str, ns: dict[str, Any]):
    for k, v in ns.items():
        #print(f"[{section} {type(section)}] {k!r} -> {v!r}")
        if v in (None, False):
            _PROFILE.set(section, k, 'no')
            continue
        if v is True:
            _PROFILE.set(section, k, 'yes')
            continue
        _PROFILE.set(section, k, str(v))

def _dump(section: str):
    data = {}
    for k, v in _PROFILE[section].items():
        if v in ('no', 'false', '0'):
            data[k] = False
            continue
        if v in ('yes', 'true', '1'):
            data[k] = True
            continue
        if v.isnumeric():
            data[k] = int(v)
            continue
        if v == _STR_DEFKEY:
            continue
        data[k] = v
    return data

class Profile:
    """Profile for webapps. Options will follow pywebview.create_window"""

    @staticmethod
    def delete_cache(name: str):
        """Delete cache data from name"""
        del Profile._caches[name]

    def __init__(self, name: str, url: str, title: str = None):
        self._data = CWConfig(name or title, url=url)
        self._name = name
        self._dir = PROFILE_DIR / name
        self._start_data = StartConfig(private_mode=False, storage_path=str(self._dir))
        self._dir.mkdir(exist_ok=True)

    @property
    def data(self):
        """Return data used for webapps"""
        return self._data

    @property
    def start_data(self):
        """Return data used for starting webapps"""
        return self._start_data

    def save(self):
        """Save data to config file"""
        name = self._name
        sio = StringIO()
        sio.write("# This file is generated by Webapp\n")
        parsed_data = self._data._asdict()
        parsed_sdata = self._start_data._asdict()
        for i in _DELOBJS_CW:
            del parsed_data[i]
        
        for i in _DELOBJS_S:
            del parsed_sdata[i]
        rd_parsed = replace_default(parsed_data, _STR_DEFKEY)
        rd_sparsed = replace_default(parsed_sdata, _STR_DEFKEY)
        #print(rd_parsed, '\n', rd_sparsed)
        if not _PROFILE.has_section(name):
            _PROFILE.add_section(name)
            _PROFILE.add_section(f"{name}.start")
        #_dstring(rd_parsed)
        #_dstring(rd_sparsed)
        #_PROFILE[name] = rd_parsed
        #_PROFILE[f"{name}.start"] = rd_sparsed
        _dset(name, rd_parsed)
        _dset(f"{name}.start", rd_sparsed)
        _PROFILE.write(sio)
        CONFIG_FILE.write_text(sio.getvalue())

    @classmethod
    def load(cls, name: str):
        """Load data from config file"""
        self = cls(name, None)
        if _PROFILE.has_section(name):
            self._data = CWConfig(**_dump(name))
            self._start_data = StartConfig(**_dump(f"{name}.start"))
        return self
